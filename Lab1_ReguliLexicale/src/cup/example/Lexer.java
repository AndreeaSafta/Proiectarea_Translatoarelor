/* The following code was generated by JFlex 1.3.5 on 28.10.2024, 08:23 */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 28.10.2024, 08:23 from the specification file
 * <tt>file:/C:/Users/Andreea/Desktop/AN4/PT/Lab1/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\7\0\1\24"+
    "\1\25\1\17\1\21\1\57\1\22\1\0\1\16\1\4\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\3\4\1\56\1\20\1\27\1\60\1\26"+
    "\2\0\1\13\1\35\1\41\1\32\1\11\1\12\1\42\1\30\1\33"+
    "\1\55\1\52\1\14\1\31\1\23\1\36\1\40\1\54\1\7\1\15"+
    "\1\6\1\10\1\34\1\53\1\51\1\37\1\5\6\0\1\13\1\35"+
    "\1\41\1\32\1\11\1\12\1\42\1\30\1\33\1\55\1\52\1\14"+
    "\1\31\1\23\1\36\1\40\1\54\1\7\1\15\1\6\1\10\1\34"+
    "\1\53\1\51\1\37\1\5\uff85\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    49,    98,   147,   196,    98,   245,   294,   343,    98, 
       98,    98,    98,   294,    98,    98,    98,   392,   441,    98, 
      196,    98,    98,   490,   539,   588,   637,   686,   735,   784, 
      833,   882,   931,   980,  1029,  1078,  1127,  1176,  1225,  1274, 
     1323,  1372,  1421,  1470,  1519,  1568,  1617,  1666,   196,   196, 
      196,  1715,   196,  1764,  1813,   196,   196,  1862,  1911,  1960, 
     2009,   196,  2058,  2107,   196,  2156,  2205,  2254,  2303,  2352, 
     2401,  2450,  2499,  2548,  2597,  2646,  2695,  2744,  2793,  2842, 
     2891,  2940,  2989,  3038,  3087,  3136,  3185,  3234,  3283,  3332, 
     3381,  3430,  3479,  3528,  3577,  3626,  3675,  3724,  3773,  3822, 
     3871,   196,  3920,  3969,  4018,   196,  4067,   196,   196,   196, 
      196,   196,   196,  4116,  4165,  4214,   196,  4263,  4312,   196, 
      196,  4361,  4410,  4459,  4508,  4557,  4606,  4655,   196,  4704, 
     4753,  4802,  4851,  4900,  4949,   196,  4998,  5047,  5096,  5145, 
     5194,  5243,  5292,  5341,  5390,  5439,  5488,  5537,  5586,   196, 
     5635,  5684,  5733,  5782,  5831,  5880,  5929,  5978,  6027,  6076, 
     6125,  6174,  6223,  6272,  6321,  6370,  6419,  6468,  6517,  6566, 
     6615,  6664,  6713,   196,   196,  6762,  6811,  6860,  6909,   196, 
      196,  6958,  7007,   196,   196,  7056,   196,  7105,  7154,  7203, 
     7252,  7301,  7350,  7399,  7448,  7497,  7546,  7595,  7644,  7693, 
     7742,  7791,  7840,  7889,  7938,  7987,   196,   196,   196,   196, 
      196,   196,  8036,  8085,  8134,   196,  8183,   196,   196,  8232, 
     8281,  8330,  8379,  8428,  8477,  8526,  8575,  8624,   196,  8673, 
     8722,  8771,   196,  8820,  8869,  8918,  8967,  9016,  9065,  9114, 
     9163,  9212,  9261,  9310,  9359,  9408,  9457,  9506,  9555,  9604, 
      196,   196,   196,   196,   196,  9653,  9702,  9751,   196,  9800, 
      196,   196,  9849,  9898,  9947,   196,   196,  9996, 10045, 10094, 
    10143,   196, 10192, 10241, 10290, 10339, 10388, 10437, 10486,   196, 
    10535,   196,   196, 10584, 10633, 10682, 10731, 10780, 10829, 10878, 
    10927, 10976,   196,   196,   196, 11025,   196, 11074, 11123, 11172, 
    11221, 11270, 11319,   196, 11368, 11417, 11466, 11515, 11564,   196, 
    11613, 11662, 11711, 11760, 11809, 11858, 11907, 11956, 12005, 12054, 
    12103, 12152, 12201, 12250, 12299, 12348, 12397,   196,   196, 12446, 
    12495, 12544, 12593, 12642, 12691, 12740, 12789, 12838, 12887, 12936, 
    12985, 13034,   196,   196,   196,   196, 13083,   196,   196, 13132, 
    13181, 13230,   196,   196, 13279, 13328, 13377,   196, 13426, 13475, 
    13524, 13573,   196,   196, 13622, 13671, 13720, 13769,   196,   196, 
      196, 13818,   196,   196, 13867, 13916, 13965, 14014, 14063, 14112, 
    14161, 14210,   196, 14259, 14308, 14357, 14406, 14455, 14504, 14553, 
    14602,   196, 14651,   196, 14700, 14749,   196,   196,   196,   196, 
      196,   196, 14798, 14847, 14896, 14945, 14994, 15043,   196,   196, 
    15092, 15141, 15190,   196, 15239,   196, 15288, 15337, 15386, 15435, 
    15484, 15533,   196,   196, 15582,   196, 15631, 15680, 15729, 15778, 
    15827, 15876, 15925, 15974, 16023, 16072,   196, 16121, 16170, 16219, 
    16268, 16317,   196,   196,   196, 16366,   196, 16415, 16464, 16513, 
    16562, 16611,   196, 16660, 16709, 16758, 16807, 16856,   196,   196, 
    16905, 16954, 17003, 17052, 17101, 17150, 17199, 17248, 17297,   196, 
    17346,   196, 17395, 17444, 17493, 17542, 17591,   196, 17640, 17689, 
    17738, 17787, 17836, 17885, 17934, 17983, 18032,   196, 18081,   196, 
    18130,   196,   196,   196,   196, 18179,   196,   196, 18228, 18277, 
    18326, 18375, 18424, 18473,   196, 18522, 18571, 18620,   196, 18669, 
      196, 18718, 18767, 18816, 18865, 18914, 18963, 19012, 19061, 19110, 
      196, 19159, 19208, 19257, 19306, 19355, 19404,   196, 19453, 19502, 
    19551, 19600, 19649,   196,   196, 19698, 19747, 19796, 19845,   196, 
      196, 19894, 19943,   196, 19992, 20041,   196, 20090, 20139, 20188, 
      196,   196,   196, 20237, 20286, 20335, 20384,   196, 20433,   196, 
    20482,   196,   196,   196,   196,   196, 20531, 20580, 20629, 20678, 
    20727,   196, 20776, 20825,   196,   196, 20874,   196, 20923,   196, 
    20972, 21021, 21070,   196,   196, 21119, 21168,   196, 21217, 21266, 
      196, 21315,   196,   196,   196, 21364, 21413, 21462,   196,   196, 
      196,   196, 21511, 21560, 21609,   196, 21658, 21707, 21756,   196, 
      196,   196,   196,   196, 21805,   196, 21854,   196,   196,   196, 
      196,   196,   196,   196,   196, 21903,   196, 21952,   196, 22001, 
      196,   196
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\1\5\1\6\1\7\11\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\13\10\6\7\5\10\1\23\1\24\1\3\61\25\4\0"+
    "\1\26\36\0\6\26\12\0\1\5\1\0\1\26\36\0"+
    "\6\26\71\0\2\27\1\0\1\27\1\7\11\10\5\27"+
    "\1\10\4\27\13\10\6\7\5\10\3\27\4\0\12\10"+
    "\5\0\1\10\4\0\26\10\7\0\1\26\4\0\1\30"+
    "\4\0\1\31\1\32\12\0\1\33\10\0\6\26\14\0"+
    "\1\26\1\0\1\34\1\0\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\4\0\1\44\4\0\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\0\1\54\1\55"+
    "\1\0\6\26\1\56\1\57\1\60\1\61\10\0\1\26"+
    "\36\0\6\26\7\0\1\62\31\0\1\63\27\0\1\31"+
    "\1\64\1\65\56\31\17\32\1\66\41\32\12\0\1\67"+
    "\54\0\1\70\1\71\1\0\1\72\1\73\1\74\14\0"+
    "\1\75\1\0\1\76\1\77\1\0\1\100\37\0\1\101"+
    "\75\0\1\102\36\0\1\103\23\0\1\104\2\0\1\105"+
    "\31\0\1\106\22\0\1\107\2\0\1\110\2\0\1\111"+
    "\1\112\30\0\1\113\1\0\1\114\17\0\1\115\33\0"+
    "\1\116\1\0\1\117\1\120\17\0\1\121\6\0\1\122"+
    "\1\123\25\0\1\124\1\0\1\125\1\0\1\126\1\127"+
    "\1\130\1\131\5\0\1\132\4\0\1\133\1\134\1\135"+
    "\1\136\1\137\1\140\1\141\1\0\1\142\1\143\7\0"+
    "\1\144\1\145\1\0\1\146\15\0\1\147\24\0\1\150"+
    "\30\0\1\151\1\152\1\0\1\153\31\0\1\154\1\155"+
    "\1\156\1\157\1\160\1\161\20\0\1\162\1\163\1\0"+
    "\1\164\53\0\1\165\2\0\1\166\1\167\1\0\1\170"+
    "\15\0\1\171\1\172\37\0\1\173\1\0\1\174\1\175"+
    "\5\0\1\176\5\0\1\177\42\0\1\200\54\0\1\201"+
    "\3\0\1\202\1\203\15\0\1\204\1\205\2\0\1\206"+
    "\3\0\1\207\32\0\1\210\20\0\1\211\2\0\1\212"+
    "\27\0\1\213\3\0\1\214\1\215\55\0\1\216\1\0"+
    "\1\217\17\0\1\220\2\0\1\221\53\0\1\222\40\0"+
    "\1\223\23\0\1\224\60\0\1\225\25\0\1\65\56\0"+
    "\16\32\1\65\1\66\41\32\23\0\1\226\106\0\1\227"+
    "\45\0\1\230\57\0\1\231\34\0\1\232\55\0\1\233"+
    "\110\0\1\234\57\0\1\235\36\0\1\236\56\0\1\237"+
    "\56\0\1\240\13\0\1\241\46\0\1\242\101\0\1\243"+
    "\63\0\1\244\63\0\1\245\27\0\1\246\113\0\1\247"+
    "\53\0\1\250\1\0\1\251\36\0\1\252\5\0\1\253"+
    "\44\0\1\254\27\0\1\255\56\0\1\256\2\0\1\257"+
    "\34\0\1\260\57\0\1\261\60\0\1\262\54\0\1\263"+
    "\57\0\1\264\1\265\1\0\1\266\1\0\1\267\14\0"+
    "\1\270\1\0\1\271\1\272\41\0\1\273\53\0\1\274"+
    "\23\0\1\275\2\0\1\276\54\0\1\277\2\0\1\300"+
    "\2\0\1\301\1\302\30\0\1\303\1\0\1\304\17\0"+
    "\1\305\33\0\1\306\1\0\1\307\1\310\17\0\1\311"+
    "\6\0\1\312\1\313\55\0\1\314\30\0\1\315\2\0"+
    "\1\316\31\0\1\317\1\320\1\321\1\322\1\323\1\324"+
    "\20\0\1\325\1\326\1\0\1\327\53\0\1\330\2\0"+
    "\1\331\2\0\1\332\15\0\1\333\1\334\41\0\1\335"+
    "\6\0\1\336\50\0\1\337\60\0\1\340\1\341\15\0"+
    "\1\342\1\343\2\0\1\344\36\0\1\345\20\0\1\346"+
    "\2\0\1\347\27\0\1\350\16\0\1\351\43\0\1\352"+
    "\1\0\1\353\17\0\1\354\2\0\1\355\53\0\1\356"+
    "\64\0\1\357\74\0\1\360\20\0\1\361\1\362\2\0"+
    "\1\363\17\0\1\364\54\0\1\365\42\0\1\366\61\0"+
    "\1\367\52\0\1\370\14\0\1\371\44\0\1\372\30\0"+
    "\1\373\34\0\1\374\67\0\1\375\44\0\1\376\24\0"+
    "\1\377\33\0\1\u0100\64\0\1\u0101\100\0\1\u0102\42\0"+
    "\1\u0103\22\0\1\u0104\62\0\1\u0105\25\0\1\u0106\66\0"+
    "\1\u0107\76\0\1\u0108\2\0\1\u0109\60\0\1\u010a\64\0"+
    "\1\u010b\50\0\1\u010c\43\0\1\u010d\120\0\1\u010e\11\0"+
    "\1\u010f\63\0\1\u0110\56\0\1\u0111\64\0\1\u0112\70\0"+
    "\1\u0113\75\0\1\u0114\26\0\1\u0115\66\0\1\u0116\15\0"+
    "\1\u0117\66\0\1\u0118\57\0\1\u0119\53\0\1\u011a\35\0"+
    "\1\u011b\57\0\1\u011c\110\0\1\u011d\36\0\1\u011e\57\0"+
    "\1\u011f\61\0\1\u0120\76\0\1\u0121\37\0\1\u0122\100\0"+
    "\1\u0123\43\0\1\u0124\75\0\1\u0125\35\0\1\u0126\65\0"+
    "\1\u0127\54\0\1\u0128\60\0\1\u0129\65\0\1\u012a\102\0"+
    "\1\u012b\33\0\1\u012c\60\0\1\u012d\60\0\1\u012e\55\0"+
    "\1\u012f\124\0\1\u0130\41\0\1\u0131\2\0\1\u0132\36\0"+
    "\1\u0133\55\0\1\u0134\63\0\1\u0135\67\0\1\u0136\70\0"+
    "\1\u0137\76\0\1\u0138\44\0\1\u0139\31\0\1\u013a\65\0"+
    "\1\u013b\56\0\1\u013c\56\0\1\u013d\13\0\1\u013e\67\0"+
    "\1\u013f\63\0\1\u0140\63\0\1\u0141\27\0\1\u0142\113\0"+
    "\1\u0143\55\0\1\u0144\36\0\1\u0145\52\0\1\u0146\27\0"+
    "\1\u0147\56\0\1\u0148\2\0\1\u0149\34\0\1\u014a\57\0"+
    "\1\u014b\60\0\1\u014c\54\0\1\u014d\62\0\1\u014e\1\u014f"+
    "\2\0\1\u0150\17\0\1\u0151\54\0\1\u0152\42\0\1\u0153"+
    "\61\0\1\u0154\67\0\1\u0155\44\0\1\u0156\30\0\1\u0157"+
    "\34\0\1\u0158\53\0\1\u0159\24\0\1\u015a\37\0\1\u015b"+
    "\62\0\1\u015c\52\0\1\u015d\66\0\1\u015e\76\0\1\u015f"+
    "\2\0\1\u0160\60\0\1\u0161\64\0\1\u0162\50\0\1\u0163"+
    "\103\0\1\u0164\11\0\1\u0165\63\0\1\u0166\72\0\1\u0167"+
    "\75\0\1\u0168\26\0\1\u0169\104\0\1\u016a\66\0\1\u016b"+
    "\52\0\1\u016c\34\0\1\u016d\103\0\1\u016e\36\0\1\u016f"+
    "\112\0\1\u0170\26\0\1\u0171\65\0\1\u0172\76\0\1\u0173"+
    "\34\0\1\u0174\65\0\1\u0175\55\0\1\u0176\124\0\1\u0177"+
    "\17\0\1\u0178\104\0\1\u0179\44\0\1\u017a\45\0\1\u017b"+
    "\61\0\1\u017c\72\0\1\u017d\76\0\1\u017e\56\0\1\u017f"+
    "\57\0\1\u0180\33\0\1\u0181\102\0\1\u0182\6\0\1\u0183"+
    "\31\0\1\u0184\100\0\1\u0185\33\0\1\u0186\60\0\1\u0187"+
    "\63\0\1\u0188\111\0\1\u0189\27\0\1\u018a\111\0\1\u018b"+
    "\31\0\1\u018c\53\0\1\u018d\63\0\1\u018e\101\0\1\u018f"+
    "\37\0\1\u0190\106\0\1\u0191\53\0\1\u0192\37\0\1\u0193"+
    "\101\0\1\u0194\37\0\1\u0195\60\0\1\u0196\72\0\1\u0197"+
    "\60\0\1\u0198\51\0\1\u0199\53\0\1\u019a\104\0\1\u019b"+
    "\77\0\1\u019c\31\0\1\u019d\46\0\1\u019e\110\0\1\u019f"+
    "\33\0\1\u01a0\104\0\1\u01a1\26\0\1\u01a2\66\0\1\u01a3"+
    "\60\0\1\u01a4\75\0\1\u01a5\43\0\1\u01a6\75\0\1\u01a7"+
    "\35\0\1\u01a8\61\0\1\u01a9\60\0\1\u01aa\65\0\1\u01ab"+
    "\102\0\1\u01ac\33\0\1\u01ad\60\0\1\u01ae\55\0\1\u01af"+
    "\105\0\1\u01b0\2\0\1\u01b1\36\0\1\u01b2\55\0\1\u01b3"+
    "\63\0\1\u01b4\67\0\1\u01b5\15\0\1\u01b6\52\0\1\u01b7"+
    "\56\0\1\u01b8\36\0\1\u01b9\112\0\1\u01ba\26\0\1\u01bb"+
    "\65\0\1\u01bc\76\0\1\u01bd\34\0\1\u01be\62\0\1\u01bf"+
    "\124\0\1\u01c0\43\0\1\u01c1\32\0\1\u01c2\72\0\1\u01c3"+
    "\76\0\1\u01c4\56\0\1\u01c5\32\0\1\u01c6\102\0\1\u01c7"+
    "\6\0\1\u01c8\24\0\1\u01c9\60\0\1\u01ca\63\0\1\u01cb"+
    "\60\0\1\u01cc\102\0\1\u01cd\62\0\1\u01ce\36\0\1\u01cf"+
    "\54\0\1\u01d0\104\0\1\u01d1\35\0\1\u01d2\101\0\1\u01d3"+
    "\40\0\1\u01d4\101\0\1\u01d5\34\0\1\u01d6\64\0\1\u01d7"+
    "\120\0\1\u01d8\60\0\1\u01d9\16\0\1\u01da\111\0\1\u01db"+
    "\55\0\1\u01dc\31\0\1\u01dd\102\0\1\u01de\52\0\1\u01df"+
    "\46\0\1\u01e0\102\0\1\u01e1\34\0\1\u01e2\62\0\1\u01e3"+
    "\56\0\1\u01e4\66\0\1\u01e5\60\0\1\u01e6\60\0\1\u01e7"+
    "\51\0\1\u01e8\111\0\1\u01e9\53\0\1\u01ea\51\0\1\u01eb"+
    "\46\0\1\u01ec\111\0\1\u01ed\24\0\1\u01ee\60\0\1\u01ef"+
    "\65\0\1\u01f0\56\0\1\u01f1\60\0\1\u01f2\60\0\1\u01f3"+
    "\101\0\1\u01f4\37\0\1\u01f5\60\0\1\u01f6\72\0\1\u01f7"+
    "\60\0\1\u01f8\44\0\1\u01f9\104\0\1\u01fa\77\0\1\u01fb"+
    "\31\0\1\u01fc\46\0\1\u01fd\110\0\1\u01fe\33\0\1\u01ff"+
    "\55\0\1\u0200\107\0\1\u0201\55\0\1\u0202\36\0\1\u0203"+
    "\54\0\1\u0204\104\0\1\u0205\35\0\1\u0206\61\0\1\u0207"+
    "\61\0\1\u0208\120\0\1\u0209\60\0\1\u020a\47\0\1\u020b"+
    "\55\0\1\u020c\31\0\1\u020d\62\0\1\u020e\102\0\1\u020f"+
    "\57\0\1\u0210\37\0\1\u0211\100\0\1\u0212\62\0\1\u0213"+
    "\66\0\1\u0214\30\0\1\u0215\60\0\1\u0216\56\0\1\u0217"+
    "\62\0\1\u0218\105\0\1\u0219\76\0\1\u021a\27\0\1\u021b"+
    "\43\0\1\u021c\75\0\1\u021d\73\0\1\u021e\30\0\1\u021f"+
    "\61\0\1\u0220\107\0\1\u0221\60\0\1\u0222\45\0\1\u0223"+
    "\46\0\1\u0224\60\0\1\u0225\60\0\1\u0226\64\0\1\u0227"+
    "\74\0\1\u0228\71\0\1\u0229\25\0\1\u022a\66\0\1\u022b"+
    "\60\0\1\u022c\60\0\1\u022d\51\0\1\u022e\111\0\1\u022f"+
    "\53\0\1\u0230\51\0\1\u0231\46\0\1\u0232\111\0\1\u0233"+
    "\24\0\1\u0234\61\0\1\u0235\57\0\1\u0236\63\0\1\u0237"+
    "\100\0\1\u0238\62\0\1\u0239\66\0\1\u023a\30\0\1\u023b"+
    "\56\0\1\u023c\107\0\1\u023d\76\0\1\u023e\12\0\1\u023f"+
    "\75\0\1\u0240\73\0\1\u0241\31\0\1\u0242\107\0\1\u0243"+
    "\54\0\1\u0244\37\0\1\u0245\107\0\1\u0246\56\0\1\u0247"+
    "\33\0\1\u0248\120\0\1\u0249\32\0\1\u024a\45\0\1\u024b"+
    "\102\0\1\u024c\36\0\1\u024d\61\0\1\u024e\72\0\1\u024f"+
    "\45\0\1\u0250\63\0\1\u0251\53\0\1\u0252\60\0\1\u0253"+
    "\63\0\1\u0254\60\0\1\u0255\60\0\1\u0256\64\0\1\u0257"+
    "\74\0\1\u0258\71\0\1\u0259\50\0\1\u025a\37\0\1\u025b"+
    "\107\0\1\u025c\56\0\1\u025d\33\0\1\u025e\72\0\1\u025f"+
    "\45\0\1\u0260\60\0\1\u0261\73\0\1\u0262\52\0\1\u0263"+
    "\51\0\1\u0264\66\0\1\u0265\52\0\1\u0266\110\0\1\u0267"+
    "\62\0\1\u0268\71\0\1\u0269\47\0\1\u026a\33\0\1\u026b"+
    "\53\0\1\u026c\60\0\1\u026d\67\0\1\u026e\51\0\1\u026f"+
    "\66\0\1\u0270\52\0\1\u0271\110\0\1\u0272\62\0\1\u0273"+
    "\26\0\1\u0274\60\0\1\u0275\60\0\1\u0276\63\0\1\u0277"+
    "\60\0\1\u0278\47\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  0,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  9,  1,  0,  0,  0,  0,  0,  0,  1,  0,  0,  1, 
     0,  1,  0,  0,  0,  0,  0,  1,  0,  1,  0,  1,  0,  0,  0,  0, 
     9,  9,  9,  1,  9,  0,  0,  9,  9,  0,  0,  0,  1,  9,  0,  0, 
     9,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0, 
     0,  0,  0,  0,  1,  0,  1,  0,  1,  0,  0,  0,  0,  1,  0,  1, 
     0,  0,  0,  0,  0,  9,  0,  0,  0,  9,  0,  9,  9,  9,  9,  9, 
     9,  0,  0,  0,  9,  0,  0,  9,  9,  0,  0,  0,  0,  0,  0,  0, 
     9,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  0, 
     0,  0,  0,  9,  9,  0,  0,  9,  9,  0,  9,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9, 
     9,  9,  9,  9,  0,  0,  0,  9,  0,  9,  9,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  9,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  9,  9,  9,  0, 
     0,  0,  9,  0,  9,  9,  0,  0,  0,  9,  9,  0,  0,  0,  0,  9, 
     0,  0,  0,  0,  0,  1,  0,  9,  0,  9,  9,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  9,  9,  9,  0,  9,  0,  0,  0,  0,  0,  0,  9, 
     0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  9,  9,  9,  9,  0,  9,  9,  0,  0,  0, 
     9,  9,  0,  0,  0,  9,  0,  0,  0,  0,  9,  9,  0,  0,  0,  0, 
     9,  9,  9,  0,  9,  9,  0,  0,  0,  0,  0,  1,  0,  0,  9,  0, 
     0,  0,  0,  0,  0,  0,  0,  9,  0,  9,  0,  0,  9,  9,  9,  9, 
     9,  9,  1,  0,  0,  0,  0,  0,  9,  9,  0,  0,  0,  9,  0,  9, 
     0,  0,  0,  0,  0,  0,  9,  9,  0,  9,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  9,  9,  9,  0,  9,  0, 
     0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  9,  9,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  9,  0,  0,  0,  0,  0,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  9,  0,  9,  0,  9,  9,  9,  9,  0, 
     9,  9,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  9,  0,  9,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  9, 
     0,  0,  0,  0,  0,  9,  9,  0,  0,  0,  0,  9,  9,  0,  0,  9, 
     0,  0,  9,  0,  0,  0,  9,  9,  9,  0,  0,  0,  0,  9,  0,  9, 
     0,  9,  9,  9,  9,  9,  0,  0,  0,  0,  0,  9,  0,  0,  9,  9, 
     0,  9,  0,  9,  0,  0,  0,  9,  9,  0,  0,  9,  0,  0,  9,  0, 
     9,  9,  9,  0,  0,  0,  9,  9,  9,  9,  0,  0,  0,  9,  0,  0, 
     0,  9,  9,  9,  9,  9,  0,  9,  0,  9,  9,  9,  9,  9,  9,  9, 
     9,  0,  9,  0,  9,  0,  9,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[22050];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 587: 
          { return symbolFactory.newSymbol("BGSOUND",BGSOUND); }
        case 633: break;
        case 584: 
          { return symbolFactory.newSymbol("ISINDEX",ISINDEX); }
        case 634: break;
        case 251: 
          { return symbolFactory.newSymbol("delOpen",delOpen); }
        case 635: break;
        case 250: 
          { return symbolFactory.newSymbol("mapOpen",mapOpen); }
        case 636: break;
        case 228: 
          { return symbolFactory.newSymbol("olClose",olClose); }
        case 637: break;
        case 218: 
          { return symbolFactory.newSymbol("ddClose",ddClose); }
        case 638: break;
        case 217: 
          { return symbolFactory.newSymbol("dlClose",dlClose); }
        case 639: break;
        case 215: 
          { return symbolFactory.newSymbol("dtClose",dtClose); }
        case 640: break;
        case 211: 
          { return symbolFactory.newSymbol("h6Close",h6Close); }
        case 641: break;
        case 210: 
          { return symbolFactory.newSymbol("h5Close",h5Close); }
        case 642: break;
        case 209: 
          { return symbolFactory.newSymbol("h4Close",h4Close); }
        case 643: break;
        case 208: 
          { return symbolFactory.newSymbol("h3Close",h3Close); }
        case 644: break;
        case 207: 
          { return symbolFactory.newSymbol("h2Close",h2Close); }
        case 645: break;
        case 206: 
          { return symbolFactory.newSymbol("h1Close",h1Close); }
        case 646: break;
        case 196: 
          { return symbolFactory.newSymbol("liClose",liClose); }
        case 647: break;
        case 186: 
          { return symbolFactory.newSymbol("ulClose",ulClose); }
        case 648: break;
        case 184: 
          { return symbolFactory.newSymbol("tdClose",tdClose); }
        case 649: break;
        case 183: 
          { return symbolFactory.newSymbol("thClose",thClose); }
        case 650: break;
        case 180: 
          { return symbolFactory.newSymbol("trClose",trClose); }
        case 651: break;
        case 179: 
          { return symbolFactory.newSymbol("ttClose",ttClose); }
        case 652: break;
        case 174: 
          { return symbolFactory.newSymbol("supOpen",supOpen); }
        case 653: break;
        case 173: 
          { return symbolFactory.newSymbol("subOpen",subOpen); }
        case 654: break;
        case 50: 
          { return symbolFactory.newSymbol("emClose",emClose); }
        case 655: break;
        case 51: 
        case 52: 
          { return symbolFactory.newSymbol("comment", comment); }
        case 656: break;
        case 252: 
          { return symbolFactory.newSymbol("dfnOpen",dfnOpen); }
        case 657: break;
        case 253: 
          { return symbolFactory.newSymbol("dirOpen",dirOpen); }
        case 658: break;
        case 258: 
          { return symbolFactory.newSymbol("insOpen",insOpen); }
        case 659: break;
        case 261: 
          { return symbolFactory.newSymbol("varOpen",varOpen); }
        case 660: break;
        case 265: 
          { return symbolFactory.newSymbol("bdoOpen",bdoOpen); }
        case 661: break;
        case 266: 
          { return symbolFactory.newSymbol("bigOpen",bigOpen); }
        case 662: break;
        case 271: 
          { return symbolFactory.newSymbol("preOpen",preOpen); }
        case 663: break;
        case 279: 
          { return symbolFactory.newSymbol("xmpOpen",xmpOpen); }
        case 664: break;
        case 281: 
          { return symbolFactory.newSymbol("kbdOpen",kbdOpen); }
        case 665: break;
        case 33: 
          { return symbolFactory.newSymbol("sOpen",sOpen); }
        case 666: break;
        case 31: 
          { return symbolFactory.newSymbol("aOpen",aOpen); }
        case 667: break;
        case 28: 
          { return symbolFactory.newSymbol("uOpen",uOpen); }
        case 668: break;
        case 19: 
          { return symbolFactory.newSymbol("comma",comma);  }
        case 669: break;
        case 18: 
          { return symbolFactory.newSymbol("colon",colon);  }
        case 670: break;
        case 39: 
          { return symbolFactory.newSymbol("iOpen",iOpen); }
        case 671: break;
        case 41: 
          { return symbolFactory.newSymbol("bOpen",bOpen); }
        case 672: break;
        case 43: 
          { return symbolFactory.newSymbol("pOpen",pOpen); }
        case 673: break;
        case 48: 
          { return symbolFactory.newSymbol("qOpen",qOpen); }
        case 674: break;
        case 396: 
          { return symbolFactory.newSymbol("tfoot",tfoot); }
        case 675: break;
        case 398: 
          { return symbolFactory.newSymbol("thead",thead); }
        case 676: break;
        case 400: 
          { return symbolFactory.newSymbol("tbody",tbody); }
        case 677: break;
        case 401: 
          { return symbolFactory.newSymbol("EMBED",EMBED); }
        case 678: break;
        case 408: 
          { return symbolFactory.newSymbol("LABEL",LABEL); }
        case 679: break;
        case 469: 
          { return symbolFactory.newSymbol("input",input); }
        case 680: break;
        case 477: 
          { return symbolFactory.newSymbol("PARAM",PARAM); }
        case 681: break;
        case 543: 
          { return symbolFactory.newSymbol("centerOpen",centerOpen); }
        case 682: break;
        case 540: 
          { return symbolFactory.newSymbol("optionOpen",optionOpen); }
        case 683: break;
        case 539: 
          { return symbolFactory.newSymbol("objectOpen",objectOpen); }
        case 684: break;
        case 534: 
          { return symbolFactory.newSymbol("ilayerOpen",ilayerOpen); }
        case 685: break;
        case 520: 
          { return symbolFactory.newSymbol("blinkClose",blinkClose); }
        case 686: break;
        case 510: 
          { return symbolFactory.newSymbol("smallClose",smallClose); }
        case 687: break;
        case 508: 
          { return symbolFactory.newSymbol("styleClose",styleClose); }
        case 688: break;
        case 504: 
          { return symbolFactory.newSymbol("layerClose",layerClose); }
        case 689: break;
        case 497: 
          { return symbolFactory.newSymbol("titleClose",titleClose); }
        case 690: break;
        case 496: 
          { return symbolFactory.newSymbol("tableClose",tableClose); }
        case 691: break;
        case 487: 
          { return symbolFactory.newSymbol("appletOpen",appletOpen); }
        case 692: break;
        case 489: 
          { return symbolFactory.newSymbol("legendOpen",legendOpen); }
        case 693: break;
        case 491: 
          { return symbolFactory.newSymbol("strikeOpen",strikeOpen); }
        case 694: break;
        case 492: 
          { return symbolFactory.newSymbol("strongOpen",strongOpen); }
        case 695: break;
        case 493: 
          { return symbolFactory.newSymbol("selectOpen",selectOpen); }
        case 696: break;
        case 494: 
          { return symbolFactory.newSymbol("scriptOpen",scriptOpen); }
        case 697: break;
        case 260: 
          { return symbolFactory.newSymbol("img",img); }
        case 698: break;
        case 277: 
          { return symbolFactory.newSymbol("COL",COL); }
        case 699: break;
        case 282: 
          { return symbolFactory.newSymbol("WBR",WBR); }
        case 700: break;
        case 617: 
          { return symbolFactory.newSymbol("COLGROUP",COLGROUP); }
        case 701: break;
        case 149: 
          { return symbolFactory.newSymbol("dfnClose",dfnClose); }
        case 702: break;
        case 292: 
          { return symbolFactory.newSymbol("formOpen",formOpen); }
        case 703: break;
        case 293: 
          { return symbolFactory.newSymbol("fontOpen",fontOpen); }
        case 704: break;
        case 296: 
          { return symbolFactory.newSymbol("abbrOpen",abbrOpen); }
        case 705: break;
        case 309: 
          { return symbolFactory.newSymbol("spanOpen",spanOpen); }
        case 706: break;
        case 327: 
          { return symbolFactory.newSymbol("subClose",subClose); }
        case 707: break;
        case 328: 
          { return symbolFactory.newSymbol("supClose",supClose); }
        case 708: break;
        case 342: 
          { return symbolFactory.newSymbol("mapClose",mapClose); }
        case 709: break;
        case 343: 
          { return symbolFactory.newSymbol("delClose",delClose); }
        case 710: break;
        case 344: 
          { return symbolFactory.newSymbol("dirClose",dirClose); }
        case 711: break;
        case 347: 
          { return symbolFactory.newSymbol("insClose",insClose); }
        case 712: break;
        case 348: 
          { return symbolFactory.newSymbol("varClose",varClose); }
        case 713: break;
        case 352: 
          { return symbolFactory.newSymbol("bdoClose",bdoClose); }
        case 714: break;
        case 353: 
          { return symbolFactory.newSymbol("bigClose",bigClose); }
        case 715: break;
        case 357: 
          { return symbolFactory.newSymbol("preClose",preClose); }
        case 716: break;
        case 362: 
          { return symbolFactory.newSymbol("xmpClose",xmpClose); }
        case 717: break;
        case 363: 
          { return symbolFactory.newSymbol("kbdClose",kbdClose); }
        case 718: break;
        case 368: 
          { return symbolFactory.newSymbol("nobrOpen",nobrOpen); }
        case 719: break;
        case 369: 
          { return symbolFactory.newSymbol("htmlOpen",htmlOpen); }
        case 720: break;
        case 370: 
          { return symbolFactory.newSymbol("headOpen",headOpen); }
        case 721: break;
        case 373: 
          { return symbolFactory.newSymbol("menuOpen",menuOpen); }
        case 722: break;
        case 382: 
          { return symbolFactory.newSymbol("bodyOpen",bodyOpen); }
        case 723: break;
        case 391: 
          { return symbolFactory.newSymbol("citeOpen",citeOpen); }
        case 724: break;
        case 393: 
          { return symbolFactory.newSymbol("codeOpen",codeOpen); }
        case 725: break;
        case 631: 
          { return symbolFactory.newSymbol("blockquoteClose",blockquoteClose); }
        case 726: break;
        case 590: 
          { return symbolFactory.newSymbol("captionOpen",captionOpen); }
        case 727: break;
        case 583: 
          { return symbolFactory.newSymbol("marqueeOpen",marqueeOpen); }
        case 728: break;
        case 579: 
          { return symbolFactory.newSymbol("noembedOpen",noembedOpen); }
        case 729: break;
        case 577: 
          { return symbolFactory.newSymbol("centerClose",centerClose); }
        case 730: break;
        case 575: 
          { return symbolFactory.newSymbol("optionClose",optionClose); }
        case 731: break;
        case 574: 
          { return symbolFactory.newSymbol("objectClose",objectClose); }
        case 732: break;
        case 571: 
          { return symbolFactory.newSymbol("ilayerClose",ilayerClose); }
        case 733: break;
        case 565: 
          { return symbolFactory.newSymbol("scriptClose",scriptClose); }
        case 734: break;
        case 563: 
          { return symbolFactory.newSymbol("selectClose",selectClose); }
        case 735: break;
        case 562: 
          { return symbolFactory.newSymbol("strongClose",strongClose); }
        case 736: break;
        case 561: 
          { return symbolFactory.newSymbol("strikeClose",strikeClose); }
        case 737: break;
        case 559: 
          { return symbolFactory.newSymbol("legendClose",legendClose); }
        case 738: break;
        case 557: 
          { return symbolFactory.newSymbol("appletClose",appletClose); }
        case 739: break;
        case 552: 
          { return symbolFactory.newSymbol("listingOpen",listingOpen); }
        case 740: break;
        case 551: 
          { return symbolFactory.newSymbol("acronymOpen",acronymOpen); }
        case 741: break;
        case 550: 
          { return symbolFactory.newSymbol("addressOpen",addressOpen); }
        case 742: break;
        case 294: 
          { return symbolFactory.newSymbol("AREA",AREA); }
        case 743: break;
        case 303: 
          { return symbolFactory.newSymbol("LINK",LINK); }
        case 744: break;
        case 372: 
          { return symbolFactory.newSymbol("META",META); }
        case 745: break;
        case 379: 
          { return symbolFactory.newSymbol("BASE",BASE); }
        case 746: break;
        case 630: 
          { return symbolFactory.newSymbol("blockquoteOpen",blockquoteOpen); }
        case 747: break;
        case 628: 
          { return symbolFactory.newSymbol("plainText",plainText); }
        case 748: break;
        case 0: 
        case 6: 
        case 7: 
          { return symbolFactory.newSymbol("plainText", plainText); }
        case 749: break;
        case 397: 
          { return symbolFactory.newSymbol("tableOpen",tableOpen); }
        case 750: break;
        case 399: 
          { return symbolFactory.newSymbol("titleOpen",titleOpen); }
        case 751: break;
        case 402: 
          { return symbolFactory.newSymbol("frameOpen",frameOpen); }
        case 752: break;
        case 409: 
          { return symbolFactory.newSymbol("layerOpen",layerOpen); }
        case 753: break;
        case 413: 
          { return symbolFactory.newSymbol("styleOpen",styleOpen); }
        case 754: break;
        case 415: 
          { return symbolFactory.newSymbol("smallOpen",smallOpen); }
        case 755: break;
        case 422: 
          { return symbolFactory.newSymbol("formClose",formClose); }
        case 756: break;
        case 423: 
          { return symbolFactory.newSymbol("fontClose",fontClose); }
        case 757: break;
        case 425: 
          { return symbolFactory.newSymbol("abbrClose",abbrClose); }
        case 758: break;
        case 436: 
          { return symbolFactory.newSymbol("spanClose",spanClose); }
        case 759: break;
        case 442: 
          { return symbolFactory.newSymbol("nobrClose",nobrClose); }
        case 760: break;
        case 443: 
          { return symbolFactory.newSymbol("htmlClose",htmlClose); }
        case 761: break;
        case 444: 
          { return symbolFactory.newSymbol("headClose",headClose); }
        case 762: break;
        case 446: 
          { return symbolFactory.newSymbol("menuClose",menuClose); }
        case 763: break;
        case 452: 
          { return symbolFactory.newSymbol("bodyClose",bodyClose); }
        case 764: break;
        case 458: 
          { return symbolFactory.newSymbol("citeClose",citeClose); }
        case 765: break;
        case 459: 
          { return symbolFactory.newSymbol("codeClose",codeClose); }
        case 766: break;
        case 471: 
          { return symbolFactory.newSymbol("blinkOpen",blinkOpen); }
        case 767: break;
        case 564: 
          { return symbolFactory.newSymbol("SPACER",SPACER); }
        case 768: break;
        case 546: 
          { return symbolFactory.newSymbol("KEYGEN",KEYGEN); }
        case 769: break;
        case 533: 
          { return symbolFactory.newSymbol("IFRAME",IFRAME); }
        case 770: break;
        case 527: 
          { return symbolFactory.newSymbol("NEXTID",NEXTID); }
        case 771: break;
        case 232: 
          { return symbolFactory.newSymbol("pClose",pClose); }
        case 772: break;
        case 135: 
          { return symbolFactory.newSymbol("olOpen",olOpen); }
        case 773: break;
        case 120: 
          { return symbolFactory.newSymbol("ddOpen",ddOpen); }
        case 774: break;
        case 119: 
          { return symbolFactory.newSymbol("dlOpen",dlOpen); }
        case 775: break;
        case 116: 
          { return symbolFactory.newSymbol("dtOpen",dtOpen); }
        case 776: break;
        case 112: 
          { return symbolFactory.newSymbol("h6Open",h6Open); }
        case 777: break;
        case 111: 
          { return symbolFactory.newSymbol("h5Open",h5Open); }
        case 778: break;
        case 110: 
          { return symbolFactory.newSymbol("h4Open",h4Open); }
        case 779: break;
        case 109: 
          { return symbolFactory.newSymbol("h3Open",h3Open); }
        case 780: break;
        case 108: 
          { return symbolFactory.newSymbol("h2Open",h2Open); }
        case 781: break;
        case 107: 
          { return symbolFactory.newSymbol("h1Open",h1Open); }
        case 782: break;
        case 101: 
          { return symbolFactory.newSymbol("qClose",qClose); }
        case 783: break;
        case 95: 
          { return symbolFactory.newSymbol("bClose",bClose); }
        case 784: break;
        case 16: 
          { return symbolFactory.newSymbol("endTag",endTag); }
        case 785: break;
        case 49: 
          { return symbolFactory.newSymbol("assign",assign);  }
        case 786: break;
        case 55: 
          { return symbolFactory.newSymbol("ttOpen",ttOpen); }
        case 787: break;
        case 56: 
          { return symbolFactory.newSymbol("trOpen",trOpen); }
        case 788: break;
        case 60: 
          { return symbolFactory.newSymbol("thOpen",thOpen); }
        case 789: break;
        case 61: 
          { return symbolFactory.newSymbol("tdOpen",tdOpen); }
        case 790: break;
        case 64: 
          { return symbolFactory.newSymbol("ulOpen",ulOpen); }
        case 791: break;
        case 65: 
          { return symbolFactory.newSymbol("emOpen",emOpen); }
        case 792: break;
        case 76: 
          { return symbolFactory.newSymbol("liOpen",liOpen); }
        case 793: break;
        case 84: 
          { return symbolFactory.newSymbol("uClose",uClose); }
        case 794: break;
        case 86: 
          { return symbolFactory.newSymbol("aClose",aClose); }
        case 795: break;
        case 88: 
          { return symbolFactory.newSymbol("sClose",sClose); }
        case 796: break;
        case 93: 
          { return symbolFactory.newSymbol("iClose",iClose); }
        case 797: break;
        case 128: 
          { return symbolFactory.newSymbol("br",br); }
        case 798: break;
        case 105: 
          { return symbolFactory.newSymbol("hr",hr); }
        case 799: break;
        case 615: 
          { return symbolFactory.newSymbol("optgroupOpen",optgroupOpen); }
        case 800: break;
        case 613: 
          { return symbolFactory.newSymbol("basefontOpen",basefontOpen); }
        case 801: break;
        case 612: 
          { return symbolFactory.newSymbol("multicolOpen",multicolOpen); }
        case 802: break;
        case 611: 
          { return symbolFactory.newSymbol("noscriptOpen",noscriptOpen); }
        case 803: break;
        case 610: 
          { return symbolFactory.newSymbol("noframesOpen",noframesOpen); }
        case 804: break;
        case 609: 
          { return symbolFactory.newSymbol("captionClose",captionClose); }
        case 805: break;
        case 605: 
          { return symbolFactory.newSymbol("marqueeClose",marqueeClose); }
        case 806: break;
        case 601: 
          { return symbolFactory.newSymbol("noembedClose",noembedClose); }
        case 807: break;
        case 600: 
          { return symbolFactory.newSymbol("listingClose",listingClose); }
        case 808: break;
        case 599: 
          { return symbolFactory.newSymbol("acronymClose",acronymClose); }
        case 809: break;
        case 598: 
          { return symbolFactory.newSymbol("addressClose",addressClose); }
        case 810: break;
        case 594: 
          { return symbolFactory.newSymbol("fieldsetOpen",fieldsetOpen); }
        case 811: break;
        case 593: 
          { return symbolFactory.newSymbol("framesetOpen",framesetOpen); }
        case 812: break;
        case 592: 
          { return symbolFactory.newSymbol("textareaOpen",textareaOpen); }
        case 813: break;
        case 254: 
          { return symbolFactory.newSymbol("divisionOpen",divisionOpen); }
        case 814: break;
        case 9: 
          {  return symbolFactory.newSymbol("TIMES", TIMES);  }
        case 815: break;
        case 12: 
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 816: break;
        case 626: 
          { return symbolFactory.newSymbol("optgroupClose",optgroupClose); }
        case 817: break;
        case 624: 
          { return symbolFactory.newSymbol("basefontClose",basefontClose); }
        case 818: break;
        case 623: 
          { return symbolFactory.newSymbol("multicolClose",multicolClose); }
        case 819: break;
        case 622: 
          { return symbolFactory.newSymbol("noscriptClose",noscriptClose); }
        case 820: break;
        case 621: 
          { return symbolFactory.newSymbol("noframesClose",noframesClose); }
        case 821: break;
        case 620: 
          { return symbolFactory.newSymbol("fieldsetClose",fieldsetClose); }
        case 822: break;
        case 619: 
          { return symbolFactory.newSymbol("framesetClose",framesetClose); }
        case 823: break;
        case 618: 
          { return symbolFactory.newSymbol("textareaClose",textareaClose); }
        case 824: break;
        case 21: 
          { return symbolFactory.newSymbol("IVAL", IVAL, Float.parseFloat(yytext())); }
        case 825: break;
        case 2: 
        case 8: 
        case 17: 
        case 20: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 826: break;
        case 345: 
          { return symbolFactory.newSymbol("divisionClose",divisionClose); }
        case 827: break;
        case 10: 
          {  return symbolFactory.newSymbol("SEMI", SEMI);  }
        case 828: break;
        case 11: 
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 829: break;
        case 15: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 830: break;
        case 14: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 831: break;
        case 13: 
          {  return symbolFactory.newSymbol("UMINUS", UMINUS);  }
        case 832: break;
        case 3: 
        case 4: 
        case 5: 
          {                                }
        case 833: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
